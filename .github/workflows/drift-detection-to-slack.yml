name: 'Terraform Drift Detection'

on:
  workflow_dispatch:
    inputs:
      run_drift_check:
        description: 'Manually run drift detection'
        required: true
        default: 'true'

  #schedule:
  #  - cron: '0 * * * *' # Every 1 hour

env:
  AWS_REGION: ca-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read
  issues: write  # Required for creating drift issues

jobs:
  detect-drift:
    # ðŸ‘‡ Use fallback for action in name (since env context isnâ€™t available here)
    name: Terraform ${{ github.event.inputs.action != '' && github.event.inputs.action || 'plan' }}
    runs-on: self-hosted
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: eks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: true

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (Drift Detection)
        id: plan
        run: |
          echo "Running Terraform plan to detect drift..."
          TFVARS_FILE="${{ github.event.inputs.tfvars_file || 'dev.tfvars' }}"
          terraform plan -out=tfplan.out -var-file=$TFVARS_FILE -input=false
          if terraform show -no-color tfplan.out | grep -q "No changes"; then
            echo "âœ… DRIFT-DETECTOR: No drift detected."
            echo "drift=false" >> $GITHUB_OUTPUT
          else
            echo "ðŸš¨ DRIFT-DETECTOR: Drift detected! Your infrastructure has changed outside Terraform."
            terraform show -no-color tfplan.out > drift_report.txt
            echo "drift=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Issue for Drift
        if: steps.plan.outputs.drift == 'true'
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "ðŸš¨ Drift Detected in EKS Infrastructure"
          content-filepath: eks/drift_report.txt
          labels: drift, terraform, eks
          assignees: ${{ github.actor }}

      - name: Notify Slack (Optional)
        if: steps.plan.outputs.drift == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            echo "Sending Slack notification..."
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \":warning: Terraform drift detected in *${{ github.repository }}* for EKS! Review issue -> ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/issues\"}" \
              $SLACK_WEBHOOK_URL
          else
            echo "No Slack webhook configured. Skipping notification."
          fi
